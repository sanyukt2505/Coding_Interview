package array.strings.triangle.minimum.sum;

import org.junit.Test;

import static org.junit.Assert.assertArrayEquals;
import static org.junit.Assert.assertEquals;

public class RealTest {
  @Test
  public void triangle() {
    Triangle tri = new Triangle(new int[][]{
            new int[]{ 2 },
            new int[]{ 3, 4 },
            new int[]{ 6, 5, 7 },
            new int[]{ 4, 1, 8, 3 }
    });

    TriangleResult solution = tri.findShortestPath();
    assertEquals(11, solution.getSmallestSum());
    assertArrayEquals(new int[]{ 2, 3, 5, 1 }, solution.getPath());
  }

  @Test(timeout = 100)
  public void bigTriangle() {
    Triangle tri = new Triangle(new int[][]{
            new int[]{30},
            new int[]{13, 48},
            new int[]{34, 20, 25},
            new int[]{5, 18, 19, 43},
            new int[]{32, 2, 26, 42, 26},
            new int[]{32, 6, 20, 43, 9, 0},
            new int[]{13, 26, 13, 43, 41, 30, 8},
            new int[]{37, 46, 30, 6, 30, 35, 17, 27},
            new int[]{12, 43, 13, 14, 29, 15, 23, 37, 25},
            new int[]{34, 7, 35, 7, 43, 43, 40, 8, 6, 10},
            new int[]{10, 13, 9, 11, 3, 47, 19, 2, 1, 44, 44},
            new int[]{48, 19, 25, 49, 40, 1, 3, 29, 23, 33, 36, 10},
            new int[]{25, 43, 0, 44, 3, 42, 7, 43, 9, 44, 48, 29, 47},
            new int[]{46, 23, 45, 9, 23, 29, 26, 26, 28, 20, 40, 32, 29, 33},
            new int[]{11, 9, 46, 25, 22, 46, 4, 47, 1, 31, 20, 6, 45, 6, 29},
            new int[]{46, 28, 8, 23, 2, 32, 22, 23, 33, 2, 2, 22, 38, 32, 22, 18},
            new int[]{25, 42, 27, 33, 23, 27, 21, 23, 4, 3, 28, 43, 47, 41, 30, 35, 21},
            new int[]{5, 31, 49, 0, 1, 42, 41, 34, 46, 40, 10, 15, 20, 30, 29, 29, 41, 24},
            new int[]{34, 41, 8, 6, 31, 12, 46, 29, 42, 46, 39, 10, 49, 24, 35, 36, 45, 42, 31},
            new int[]{48, 43, 16, 28, 16, 29, 39, 43, 43, 24, 9, 18, 28, 38, 19, 27, 22, 41, 4, 30},
            new int[]{0, 43, 38, 48, 44, 5, 9, 31, 33, 23, 25, 31, 11, 43, 23, 3, 16, 43, 24, 37, 5},
            new int[]{17, 18, 47, 16, 9, 37, 10, 3, 40, 36, 36, 31, 30, 38, 21, 41, 41, 30, 25, 43, 45, 31},
            new int[]{25, 3, 45, 9, 9, 15, 31, 8, 9, 10, 16, 14, 47, 15, 7, 49, 6, 44, 40, 38, 31, 10, 9},
            new int[]{36, 6, 43, 42, 17, 49, 2, 37, 10, 16, 19, 38, 25, 40, 40, 18, 19, 32, 7, 37, 13, 25, 41, 43},
            new int[]{47, 39, 34, 16, 10, 19, 13, 33, 16, 2, 15, 38, 34, 24, 43, 44, 5, 13, 5, 0, 37, 5, 44, 9, 38},
            new int[]{18, 29, 31, 36, 2, 48, 43, 41, 37, 36, 46, 7, 3, 21, 36, 9, 44, 7, 6, 11, 38, 42, 13, 9, 18, 24},
            new int[]{7, 41, 6, 10, 29, 6, 12, 7, 32, 23, 27, 30, 2, 6, 14, 15, 26, 46, 30, 45, 41, 18, 31, 2, 16, 29, 44},
            new int[]{15, 38, 2, 42, 2, 45, 2, 37, 42, 45, 15, 21, 32, 0, 48, 29, 5, 26, 17, 46, 42, 10, 43, 27, 47, 43, 28, 33},
            new int[]{18, 41, 10, 42, 20, 31, 37, 38, 8, 44, 8, 17, 13, 0, 49, 48, 43, 45, 24, 25, 47, 38, 34, 3, 4, 19, 11, 8, 36},
            new int[]{9, 29, 41, 4, 0, 4, 38, 41, 35, 44, 48, 2, 1, 21, 2, 30, 28, 10, 18, 47, 7, 14, 41, 38, 25, 31, 17, 9, 9, 8},
            new int[]{47, 43, 24, 49, 46, 44, 17, 7, 16, 6, 44, 30, 15, 25, 26, 7, 48, 15, 48, 30, 17, 36, 4, 16, 1, 40, 47, 34, 4, 13, 21},
            new int[]{24, 24, 16, 3, 23, 26, 41, 23, 0, 20, 28, 45, 4, 24, 19, 33, 24, 34, 21, 7, 35, 21, 38, 25, 18, 34, 25, 1, 31, 30, 17, 48},
            new int[]{38, 42, 14, 24, 32, 30, 26, 15, 40, 25, 13, 11, 0, 1, 9, 44, 10, 36, 24, 27, 48, 25, 48, 30, 13, 36, 18, 42, 14, 37, 41, 17, 8},
            new int[]{19, 11, 48, 37, 3, 38, 7, 7, 12, 14, 42, 15, 39, 44, 49, 14, 32, 13, 4, 16, 20, 0, 1, 44, 14, 6, 43, 26, 33, 27, 45, 15, 43, 22},
            new int[]{24, 12, 43, 32, 39, 46, 9, 43, 33, 5, 35, 35, 28, 48, 32, 6, 29, 3, 29, 23, 21, 23, 18, 23, 25, 49, 28, 22, 12, 17, 7, 3, 40, 41, 37},
            new int[]{1, 38, 49, 22, 28, 43, 44, 41, 9, 18, 46, 9, 40, 48, 7, 27, 33, 9, 38, 28, 22, 40, 10, 26, 18, 7, 34, 9, 21, 35, 19, 6, 30, 29, 48, 17},
            new int[]{20, 9, 37, 0, 5, 11, 40, 33, 11, 32, 28, 28, 23, 21, 18, 11, 39, 49, 36, 31, 42, 40, 11, 35, 28, 31, 37, 12, 24, 34, 6, 18, 13, 38, 45, 37, 32},
            new int[]{17, 49, 38, 31, 20, 6, 6, 9, 18, 49, 25, 7, 4, 21, 0, 11, 31, 45, 35, 42, 9, 45, 18, 8, 46, 30, 44, 4, 5, 21, 18, 40, 38, 32, 13, 28, 38, 37},
            new int[]{24, 48, 30, 49, 32, 38, 49, 28, 49, 46, 4, 6, 16, 3, 11, 49, 27, 39, 37, 24, 49, 12, 33, 3, 30, 14, 6, 39, 30, 34, 1, 40, 5, 17, 17, 29, 10, 17, 9},
            new int[]{35, 36, 49, 16, 10, 1, 49, 49, 30, 19, 18, 16, 12, 32, 43, 24, 17, 32, 30, 46, 5, 21, 29, 6, 41, 20, 41, 2, 16, 3, 10, 41, 3, 14, 26, 5, 32, 15, 6, 14}
    });

    TriangleResult solution = tri.findShortestPath();
    assertEquals(494, solution.getSmallestSum());
    assertArrayEquals(new int[]{ 30, 13, 20, 18, 2, 6, 13, 6, 14, 7,
            3, 1, 7, 26, 1, 2, 3, 10, 10, 18,
            11, 38, 7, 18, 5, 7, 30, 17, 25, 7,
            17, 21, 25, 0, 18, 10, 11, 8, 3, 6 }, solution.getPath());
  }
}
